# schema.graphql is public facing api we will interface with from UI, prisma.graphql is our api with the db
# ------------------------------------------------
# imports is not a standard in GraphQl but Prisma uses something called GraphQl imports, which is written as below (incl #).
# This will import all of the types and inputs from the designated file i.e. Item
# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type Mutation {
  createItem(
    title: String,
    description: String,
    price: Int,
    image: String,
    largeImage: String
    ): Item!

  updateItem(
    id: ID!
    title: String,
    description: String,
    price: Int
    # TODO: Add image and largeImage to updateItem mutation and UI edit screen
  ): Item!

  deleteItem(id: ID!): Item!
  signup(email: String!, password: String!, name: String!): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
  updatePermissions(permissions: [Permission], userId: ID!): User
  addToCart(id: ID!): CartItem
}

type Query {
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, first: Int): [Item]!
  # ItemWhereUniqueInput is generated in the prisma.graphql file
  # Do not make return Item as required because if in a scenario we pass an item that does not
  # exist, we do not want it to error
  item(where: ItemWhereUniqueInput!): Item
  itemsConnection(where: ItemWhereInput): ItemConnection!
  me: User
  # array is required to be returned but may be empty and so user is not required e.g. [User!]!
  users: [User]!
}

type User {
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
  cart: [CartItem!]!
}
